<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dplyr on Ranalytics.vn - Từ phân tích đến quyết định</title>
    <link>/tags/dplyr/</link>
    <description>Recent content in Dplyr on Ranalytics.vn - Từ phân tích đến quyết định</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/dplyr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sử dụng hàm select và rename nâng cao trong dplyr</title>
      <link>/blog/2019/04/25/2019-04-25-su-dung-select-va-rename-nang-cao-trong-dplyr/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/04/25/2019-04-25-su-dung-select-va-rename-nang-cao-trong-dplyr/</guid>
      <description>Trong quá trình phân tích dữ liệu, chúng ta có thể phải xử lý những dữ liệu rất lớn lên đến hàng chục triệu dòng (quan sát) hoặc hàng trăm cột (biến).
Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn cách chọn và sửa tên biến nhanh đối với trường hợp dữ liệu lớn nói trên bằng việc sử dụng các hàm select_all, select_if, select_at, rename_all, rename_if, rename_at.</description>
    </item>
    
    <item>
      <title>Thống kê dữ liệu theo dòng</title>
      <link>/blog/2019/04/18/2019-04-18-thong-ke-theo-dong/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/04/18/2019-04-18-thong-ke-theo-dong/</guid>
      <description>Thông thường trong quá trình phân tích dữ liệu chúng ta thống kê dữ liệu theo chiều (tức theo biến/cột) bằng việc sử dụng nhóm câu lệnh group_by() kết hợp summarise(). Tuy nhiên, đối với một số trường hợp chúng ta cần thống kê dữ liệu theo dòng.
Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn cách sử dụng hàm rowSums(), rowMeans() để tính toán số tổng, trung bình theo từng quan sát (dòng).</description>
    </item>
    
    <item>
      <title>Tổng hợp nhiều biến với hàm summarise</title>
      <link>/blog/2019/03/25/2019-03-25-dung-ham-summarise-all/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/03/25/2019-03-25-dung-ham-summarise-all/</guid>
      <description>Trong quá trình phân tích dữ liệu sẽ có thể phát sinh việc chúng ta muốn summarise nhiều biến cùng lúc trong tập dữ liệu. Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn cách sử dụng nhóm hàm summarise_if(), summarise_at(), summarise_all() để xử lý vấn đề trên.
Về cơ bản, nhóm hàm trên sử dụng khi chúng ta muốn summarise nhiều biến cùng lúc, còn sự khác biệt của nhóm hàm trên là:</description>
    </item>
    
    <item>
      <title>Cách ghép các bảng dữ liệu với JOIN</title>
      <link>/blog/2019/03/05/2019-03-05-cach-su-dung-join/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/03/05/2019-03-05-cach-su-dung-join/</guid>
      <description>Trong thực tế dữ liệu của chúng ta có thể lưu trữ rời rạc ở các bảng dữ liệu khác nhau, vì vậy sẽ có lúc chúng ta cần phải nối các bảng dữ liệu với nhau để có thêm thông tin phục vụ cho việc phân tích dữ liệu.
Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn cách nối các bảng dữ liệu sử dụng nhóm hàm join trong R.</description>
    </item>
    
    <item>
      <title>Sử dụng hàm select trong dplyr</title>
      <link>/blog/2019/02/05/2019-02-05-su-dung-select-trong-dplyr/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/02/05/2019-02-05-su-dung-select-trong-dplyr/</guid>
      <description>Select thông thườngNhư các bạn đã biết để lấy dữ liệu theo biến (cột), thông thường chúng ta sẽ sử dụng hàm select() với cấu trúc như sau select(tên biến) hoặc select(số thứ tự của biến).
Ví dụ sử dụng dữ liệu iris có sẵn trong R
library(dplyr) # package sử dụng# Các biến có trong data irisiris %&amp;gt;% names## [1] &amp;quot;Sepal.Length&amp;quot; &amp;quot;Sepal.Width&amp;quot; &amp;quot;Petal.Length&amp;quot; &amp;quot;Petal.Width&amp;quot; ## [5] &amp;quot;Species&amp;quot;Dữ liệu này có 5 biến với thứ tự lần lượt như trên.</description>
    </item>
    
    <item>
      <title>Biến đổi dữ liệu nhanh với mutate</title>
      <link>/blog/2018/12/30/2018-12-30-bien-doi-nhanh-voi-mutate/</link>
      <pubDate>Sun, 30 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/12/30/2018-12-30-bien-doi-nhanh-voi-mutate/</guid>
      <description>Trong quá trình phân tích dữ liệu sẽ có thể phát sinh việc chúng ta muốn tạo thêm những biến mới - phái sinh từ những biến sẵn có trong dữ liệu. Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn cách sử dụng hàm mutate() và nhóm hàm mutate_if(), mutate_at(), mutate_all() để thêm 1 hoặc nhiều biến vào tập dữ liệu.
Sử dụng dữ liệu iris có sẵn trong R.</description>
    </item>
    
    <item>
      <title>Hướng dẫn sử dụng case_when trong dplyr</title>
      <link>/blog/2018/12/10/2018-12-10-su-dung-case-when/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/12/10/2018-12-10-su-dung-case-when/</guid>
      <description>Thông thường trong quá trình phân tích dữ liệu, chúng ta sẽ gặp phải vấn đề liên quan đến chất lượng dữ liệu. Do vậy, việc trước tiên chúng ta cần phải làm đó là xử lý, làm sạch dữ liệu. Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn sử dụng một trong những hàm rất phổ biến và hữu dụng trong việc xử lý dữ liệu trong R - hàm case_when().</description>
    </item>
    
  </channel>
</rss>