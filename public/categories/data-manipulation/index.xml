<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Manipulation on Ranalytics.vn - Từ phân tích đến quyết định</title>
    <link>/categories/data-manipulation/</link>
    <description>Recent content in Data Manipulation on Ranalytics.vn - Từ phân tích đến quyết định</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/data-manipulation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tạo biểu đồ cho mô hình với ggfortify</title>
      <link>/blog/2019/04/25/2019-04-20-tao-bieu-do-cho-mo-hinh-voi-ggfortify/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/04/25/2019-04-20-tao-bieu-do-cho-mo-hinh-voi-ggfortify/</guid>
      <description>Khi xây dựng các mô hình đơn giản như hồi quy tuyến tính hoặc chuỗi thời gian ARIMA, các biểu đồ mặc định từ mô hình thường được vẽ với r-base. Do đó, các biểu đồ này thường không được đẹp mắt. Trong bài viết này, RAnalytics sẽ hướng dẫn các bạn sử dụng package ggfortify để trực quan hóa kết quả từ các mô hình.
ggfortify nằm trong hệ sinh thái của ggplot2.</description>
    </item>
    
    <item>
      <title>Thống kê dữ liệu theo dòng</title>
      <link>/blog/2019/04/18/2019-04-18-thong-ke-theo-dong/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/04/18/2019-04-18-thong-ke-theo-dong/</guid>
      <description>Thông thường trong quá trình phân tích dữ liệu chúng ta thống kê dữ liệu theo chiều (tức theo biến/cột) bằng việc sử dụng nhóm câu lệnh group_by() kết hợp summarise(). Tuy nhiên, đối với một số trường hợp chúng ta cần thống kê dữ liệu theo dòng.
Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn cách sử dụng hàm rowSums(), rowMeans() để tính toán số tổng, trung bình theo từng quan sát (dòng).</description>
    </item>
    
    <item>
      <title>Lập trình hàm với map</title>
      <link>/blog/2019/04/15/2019-04-15-lap-trinh-ham-voi-map/</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/04/15/2019-04-15-lap-trinh-ham-voi-map/</guid>
      <description>Khi phân tích dữ liệu phức tạp, ta thường xuyên phải thực hiện một nhóm các phân tích tương tự nhau cho các nhóm dữ liệu khác nhau. Việc sử dụng các hàm làm đơn vị thao tác cơ bản và phối hợp các hàm với nhau được gọi là lập trình chức năng hàm (functional programming). Để đơn giản, ta xét ví dụ sau.
Sử dụng tập dữ liệu iris, với mỗi nhóm của Species, xây dựng mô hình hồi quy giữa Sepal.</description>
    </item>
    
    <item>
      <title>Tổng hợp nhiều biến với hàm summarise</title>
      <link>/blog/2019/03/25/2019-03-25-dung-ham-summarise-all/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/03/25/2019-03-25-dung-ham-summarise-all/</guid>
      <description>Trong quá trình phân tích dữ liệu sẽ có thể phát sinh việc chúng ta muốn summarise nhiều biến cùng lúc trong tập dữ liệu. Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn cách sử dụng nhóm hàm summarise_if(), summarise_at(), summarise_all() để xử lý vấn đề trên.
Về cơ bản, nhóm hàm trên sử dụng khi chúng ta muốn summarise nhiều biến cùng lúc, còn sự khác biệt của nhóm hàm trên là:</description>
    </item>
    
    <item>
      <title>Cách ghép các bảng dữ liệu với JOIN</title>
      <link>/blog/2019/03/05/2019-03-05-cach-su-dung-join/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/03/05/2019-03-05-cach-su-dung-join/</guid>
      <description>Trong thực tế dữ liệu của chúng ta có thể lưu trữ rời rạc ở các bảng dữ liệu khác nhau, vì vậy sẽ có lúc chúng ta cần phải nối các bảng dữ liệu với nhau để có thêm thông tin phục vụ cho việc phân tích dữ liệu.
Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn cách nối các bảng dữ liệu sử dụng nhóm hàm join trong R.</description>
    </item>
    
    <item>
      <title>Sử dụng hàm select trong dplyr</title>
      <link>/blog/2019/02/05/2019-02-05-su-dung-select-trong-dplyr/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/02/05/2019-02-05-su-dung-select-trong-dplyr/</guid>
      <description>Select thông thườngNhư các bạn đã biết để lấy dữ liệu theo biến (cột), thông thường chúng ta sẽ sử dụng hàm select() với cấu trúc như sau select(tên biến) hoặc select(số thứ tự của biến).
Ví dụ sử dụng dữ liệu iris có sẵn trong R
library(dplyr) # package sử dụng# Các biến có trong data irisiris %&amp;gt;% names## [1] &amp;quot;Sepal.Length&amp;quot; &amp;quot;Sepal.Width&amp;quot; &amp;quot;Petal.Length&amp;quot; &amp;quot;Petal.Width&amp;quot; ## [5] &amp;quot;Species&amp;quot;Dữ liệu này có 5 biến với thứ tự lần lượt như trên.</description>
    </item>
    
    <item>
      <title>Xử lý dữ liệu missing</title>
      <link>/blog/2019/01/15/2019-01-15-xu-ly-du-lieu-missing/</link>
      <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/01/15/2019-01-15-xu-ly-du-lieu-missing/</guid>
      <description>Trong quá trình xử lý, làm sạch dữ liệu, chúng ta sẽ thường gặp phải vấn đề dữ liệu bị missing. Nguyên nhân có thể do dữ liệu không đầy đủ hoặc có sai sót trong quá trình nhập liệu… Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn một số mẹo để xử lý giá trị missing (missing values) trong R.
Vậy, làm thế nào để xử lý missing values?</description>
    </item>
    
    <item>
      <title>Biến đổi dữ liệu nhanh với mutate</title>
      <link>/blog/2018/12/30/2018-12-30-bien-doi-nhanh-voi-mutate/</link>
      <pubDate>Sun, 30 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/12/30/2018-12-30-bien-doi-nhanh-voi-mutate/</guid>
      <description>Trong quá trình phân tích dữ liệu sẽ có thể phát sinh việc chúng ta muốn tạo thêm những biến mới - phái sinh từ những biến sẵn có trong dữ liệu. Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn cách sử dụng hàm mutate() và nhóm hàm mutate_if(), mutate_at(), mutate_all() để thêm 1 hoặc nhiều biến vào tập dữ liệu.
Sử dụng dữ liệu iris có sẵn trong R.</description>
    </item>
    
    <item>
      <title>Hướng dẫn sử dụng case_when trong dplyr</title>
      <link>/blog/2018/12/10/2018-12-10-su-dung-case-when/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/12/10/2018-12-10-su-dung-case-when/</guid>
      <description>Thông thường trong quá trình phân tích dữ liệu, chúng ta sẽ gặp phải vấn đề liên quan đến chất lượng dữ liệu. Do vậy, việc trước tiên chúng ta cần phải làm đó là xử lý, làm sạch dữ liệu. Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn sử dụng một trong những hàm rất phổ biến và hữu dụng trong việc xử lý dữ liệu trong R - hàm case_when().</description>
    </item>
    
    <item>
      <title>Xử lý dữ liệu chuỗi với stringr</title>
      <link>/blog/2018/09/02/2018-09-02-xu-ly-du-lieu-chuoi-voi-stringr/</link>
      <pubDate>Sun, 02 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/09/02/2018-09-02-xu-ly-du-lieu-chuoi-voi-stringr/</guid>
      <description>Trong quá trình phân tích dữ liệu, chúng ta sẽ thường gặp phải những vấn đề liên quan đến việc xử lý text. Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn sử dụng một số hàm cơ bản trong package stringr để xử lý vấn đề trên.
Stringr packageThông thường, dữ liệu text không phải lúc nào cũng “sạch” do gặp phải những vấn đề khi nhập liệu như: lúc viết hoa, lúc viết thường, thừa nhiều dấu cách, lẫn số hoặc ký tự đặc biệt trong text… Package stringr là 1 trong những package rất hữu dụng trong R để giải quyết những vấn đề trên.</description>
    </item>
    
    <item>
      <title>Xử lý dữ liệu thời gian với lubridate</title>
      <link>/blog/2018/08/27/2018-08-27-xu-ly-du-lieu-thoi-gian-voi-lubridate/</link>
      <pubDate>Mon, 27 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/08/27/2018-08-27-xu-ly-du-lieu-thoi-gian-voi-lubridate/</guid>
      <description>Trong quá trình phân tích dữ liệu, chúng ta sẽ thường gặp phải những vấn đề liên quan đến việc xử lý các biến date hoặc date-time. Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn sử dụng một số hàm cơ bản trong package lubridate để xử lý các biến date và date-time.
Lubridate packageTrong R dữ liệu liên quan đến thời gian có 2 kiểu định dạng:</description>
    </item>
    
    <item>
      <title>Xử lý factor với `forcats`</title>
      <link>/blog/2018/08/07/2018-08-07-xu-ly-factor-voi-forcats/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/08/07/2018-08-07-xu-ly-factor-voi-forcats/</guid>
      <description>Trong quá trình phân tích dữ liệu, chúng ta sẽ thường gặp phải những vấn đề liên quan đến việc xử lý các biến rời rạc (factor/categorical variable). Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn sử dụng một số hàm cơ bản trong package forcats để xử lý các biến rời rạc.
Forcats packagePackage forcats là 1 package rất hữu dụng trong việc xử lý các biến rời rạc có thuộc tính là nhóm (factor) trong R.</description>
    </item>
    
  </channel>
</rss>