<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Manipulation on Ranalytics.vn - Từ phân tích đến quyết định</title>
    <link>/categories/data-manipulation/</link>
    <description>Recent content in Data Manipulation on Ranalytics.vn - Từ phân tích đến quyết định</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/data-manipulation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Thu thập dữ liệu từ website với rvest</title>
      <link>/blog/2019/07/15/2019-07-15-thu-thap-du-lieu-tu-website-voi-rvest/</link>
      <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/07/15/2019-07-15-thu-thap-du-lieu-tu-website-voi-rvest/</guid>
      <description>Trong quá trình làm việc, có rất nhiều nguồn dữ liệu từ website mà ta có thể thu thập và sử dụng. Trong bài viết này, RAnalyticssẽ giới thiệu với các bạn cách thu thập dữ liệu từ website đơn giản với rvest
rvestrvest là package cho phép đọc dữ liệu html từ web trong hệ sinh thái của tidyverse. Sử dụng rvest cho phép thu thập dữ liệu một cách nhanh chóng từ web.</description>
    </item>
    
    <item>
      <title>Xử lý dữ liệu missing nâng cao</title>
      <link>/blog/2019/06/30/2019-06-30-xu-ly-missing-nang-cao/</link>
      <pubDate>Sun, 30 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/06/30/2019-06-30-xu-ly-missing-nang-cao/</guid>
      <description>Trong quá trình phân tích dữ liệu thực tế, chúng ta sẽ thường gặp phải vấn đề missing values. Trong những bài viết trước, RAnalytics đã chia sẻ một số tips xử lý missing values, các bạn có thể tham khảo tại:
http://ranalytics.vn/blog/2019/01/15/2019-01-15-xu-ly-du-lieu-missing/
http://ranalytics.vn/blog/2019/06/20/2019-06-20-loai-bo-hang-va-cot-chua-gia-tri-missing/
Tuy nhiên, câu hỏi đặt ra lúc này là giả sử dữ liệu của chúng ta có rất nhiều biến có missing values, vậy thì làm thế nào để thay thế missing values ở hàng loạt các biến cùng một lúc?</description>
    </item>
    
    <item>
      <title>Loại bỏ dòng hoặc cột chứa giá trị missing</title>
      <link>/blog/2019/06/20/2019-06-20-loai-bo-hang-va-cot-chua-gia-tri-missing/</link>
      <pubDate>Thu, 20 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/06/20/2019-06-20-loai-bo-hang-va-cot-chua-gia-tri-missing/</guid>
      <description>Trong quá trình phân tích dữ liệu, chúng ta sẽ rất hay gặp phải vấn đề dữ liệu bị thiếu do không có dữ liệu. Những giá trị bị thiếu này trong R sẽ hiển thị là NA.
Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn cách loại bỏ dòng hoặc cột chứa giá trị NA trong R.
Ta sử dụng dữ liệu giả lập sau đây:</description>
    </item>
    
    <item>
      <title>Tách và gộp biến với separate và unite trong tidyverse</title>
      <link>/blog/2019/05/30/2019-05-30-su-dung-seperate-va-unite/</link>
      <pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/05/30/2019-05-30-su-dung-seperate-va-unite/</guid>
      <description>Trong quá trình phân tích dữ liệu, sẽ có lúc chúng ta muốn nhìn dữ liệu theo các chiều khác nhau. Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn cách tách và gộp biến theo cách mà chúng ta mong muốn bằng việc sử dụng hàm separate() và unite() trong package tidyverse.
Sử dụng dữ liệu giả lập, bao gồm thông tin ngày sinh và địa chỉ sinh sống của 3 học sinh cấp 3 sau đây:</description>
    </item>
    
    <item>
      <title>Tổ chức dữ liệu với spread và gather trong tidyverse</title>
      <link>/blog/2019/05/15/2019-05-15-su-dung-gather-va-spread-voi-tidyr/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/05/15/2019-05-15-su-dung-gather-va-spread-voi-tidyr/</guid>
      <description>Trong quá trình phân tích dữ liệu, sẽ có lúc chúng ta muốn nhìn dữ liệu theo các chiều khác nhau. Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn cách tổ chức dữ liệu theo cách mà chúng ta mong muốn bằng việc sử dụng hàm gather() và spread() trong package tidyverse.
gatherSử dụng dữ liệu giả định, bao gồm tổng điểm thi cuối năm 5 môn: Toán, Lý, Hóa, Anh, Văn của 3 bạn học sinh cấp 3 vào năm 2017, 2018.</description>
    </item>
    
    <item>
      <title>Biến đổi dữ liệu nâng cao trong purrr</title>
      <link>/blog/2019/05/05/2019-05-05-bien-doi-du-lieu-nang-cao-voi-modify-trong-purrr/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/05/05/2019-05-05-bien-doi-du-lieu-nang-cao-voi-modify-trong-purrr/</guid>
      <description>Bài viết này tiếp nối series về ứng dụng của purrr trong phân tích dữ liệu. Ở phần trước, chúng ta đã học về cách sử dụng map. Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn sử dụng thêm 3 ứng dụng thường dùng của purrr:
Thay đổi biến với modifyTạo các hàm khi sử dụng cùng mapTạo các chuỗi hàm với composeSửa đổi giá trị với modifyTương tự như map, modify cho áp dụng hàm vào một nhóm các list.</description>
    </item>
    
    <item>
      <title>Sử dụng hàm select và rename nâng cao trong dplyr</title>
      <link>/blog/2019/04/25/2019-04-25-su-dung-select-va-rename-nang-cao-trong-dplyr/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/04/25/2019-04-25-su-dung-select-va-rename-nang-cao-trong-dplyr/</guid>
      <description>Trong quá trình phân tích dữ liệu, chúng ta có thể phải xử lý những dữ liệu rất lớn lên đến hàng chục triệu dòng (quan sát) hoặc hàng trăm cột (biến).
Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn cách chọn và sửa tên biến nhanh đối với trường hợp dữ liệu lớn nói trên bằng việc sử dụng các hàm select_all, select_if, select_at, rename_all, rename_if, rename_at.</description>
    </item>
    
    <item>
      <title>Thống kê dữ liệu theo dòng</title>
      <link>/blog/2019/04/18/2019-04-18-thong-ke-theo-dong/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/04/18/2019-04-18-thong-ke-theo-dong/</guid>
      <description>Thông thường trong quá trình phân tích dữ liệu chúng ta thống kê dữ liệu theo chiều (tức theo biến/cột) bằng việc sử dụng nhóm câu lệnh group_by() kết hợp summarise(). Tuy nhiên, đối với một số trường hợp chúng ta cần thống kê dữ liệu theo dòng.
Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn cách sử dụng hàm rowSums(), rowMeans() để tính toán số tổng, trung bình theo từng quan sát (dòng).</description>
    </item>
    
    <item>
      <title>Lập trình hàm với map</title>
      <link>/blog/2019/04/15/2019-04-15-lap-trinh-ham-voi-map/</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/04/15/2019-04-15-lap-trinh-ham-voi-map/</guid>
      <description>Khi phân tích dữ liệu phức tạp, ta thường xuyên phải thực hiện một nhóm các phân tích tương tự nhau cho các nhóm dữ liệu khác nhau. Việc sử dụng các hàm làm đơn vị thao tác cơ bản và phối hợp các hàm với nhau được gọi là lập trình chức năng hàm (functional programming). Để đơn giản, ta xét ví dụ sau.
Sử dụng tập dữ liệu iris, với mỗi nhóm của Species, xây dựng mô hình hồi quy giữa Sepal.</description>
    </item>
    
    <item>
      <title>Tổng hợp nhiều biến với hàm summarise</title>
      <link>/blog/2019/03/25/2019-03-25-dung-ham-summarise-all/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/03/25/2019-03-25-dung-ham-summarise-all/</guid>
      <description>Trong quá trình phân tích dữ liệu sẽ có thể phát sinh việc chúng ta muốn summarise nhiều biến cùng lúc trong tập dữ liệu. Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn cách sử dụng nhóm hàm summarise_if(), summarise_at(), summarise_all() để xử lý vấn đề trên.
Về cơ bản, nhóm hàm trên sử dụng khi chúng ta muốn summarise nhiều biến cùng lúc, còn sự khác biệt của nhóm hàm trên là:</description>
    </item>
    
    <item>
      <title>Cách ghép các bảng dữ liệu với JOIN</title>
      <link>/blog/2019/03/05/2019-03-05-cach-su-dung-join/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/03/05/2019-03-05-cach-su-dung-join/</guid>
      <description>Trong thực tế dữ liệu của chúng ta có thể lưu trữ rời rạc ở các bảng dữ liệu khác nhau, vì vậy sẽ có lúc chúng ta cần phải nối các bảng dữ liệu với nhau để có thêm thông tin phục vụ cho việc phân tích dữ liệu.
Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn cách nối các bảng dữ liệu sử dụng nhóm hàm join trong R.</description>
    </item>
    
    <item>
      <title>Sử dụng hàm select trong dplyr</title>
      <link>/blog/2019/02/05/2019-02-05-su-dung-select-trong-dplyr/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/02/05/2019-02-05-su-dung-select-trong-dplyr/</guid>
      <description>Select thông thườngNhư các bạn đã biết để lấy dữ liệu theo biến (cột), thông thường chúng ta sẽ sử dụng hàm select() với cấu trúc như sau select(tên biến) hoặc select(số thứ tự của biến).
Ví dụ sử dụng dữ liệu iris có sẵn trong R
library(dplyr) # package sử dụng# Các biến có trong data irisiris %&amp;gt;% names## [1] &amp;quot;Sepal.Length&amp;quot; &amp;quot;Sepal.Width&amp;quot; &amp;quot;Petal.Length&amp;quot; &amp;quot;Petal.Width&amp;quot; ## [5] &amp;quot;Species&amp;quot;Dữ liệu này có 5 biến với thứ tự lần lượt như trên.</description>
    </item>
    
    <item>
      <title>Xử lý dữ liệu missing</title>
      <link>/blog/2019/01/15/2019-01-15-xu-ly-du-lieu-missing/</link>
      <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/01/15/2019-01-15-xu-ly-du-lieu-missing/</guid>
      <description>Trong quá trình xử lý, làm sạch dữ liệu, chúng ta sẽ thường gặp phải vấn đề dữ liệu bị missing. Nguyên nhân có thể do dữ liệu không đầy đủ hoặc có sai sót trong quá trình nhập liệu… Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn một số mẹo để xử lý giá trị missing (missing values) trong R.
Vậy, làm thế nào để xử lý missing values?</description>
    </item>
    
    <item>
      <title>Biến đổi dữ liệu nhanh với mutate</title>
      <link>/blog/2018/12/30/2018-12-30-bien-doi-nhanh-voi-mutate/</link>
      <pubDate>Sun, 30 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/12/30/2018-12-30-bien-doi-nhanh-voi-mutate/</guid>
      <description>Trong quá trình phân tích dữ liệu sẽ có thể phát sinh việc chúng ta muốn tạo thêm những biến mới - phái sinh từ những biến sẵn có trong dữ liệu. Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn cách sử dụng hàm mutate() và nhóm hàm mutate_if(), mutate_at(), mutate_all() để thêm 1 hoặc nhiều biến vào tập dữ liệu.
Sử dụng dữ liệu iris có sẵn trong R.</description>
    </item>
    
    <item>
      <title>Hướng dẫn sử dụng case_when trong dplyr</title>
      <link>/blog/2018/12/10/2018-12-10-su-dung-case-when/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/12/10/2018-12-10-su-dung-case-when/</guid>
      <description>Thông thường trong quá trình phân tích dữ liệu, chúng ta sẽ gặp phải vấn đề liên quan đến chất lượng dữ liệu. Do vậy, việc trước tiên chúng ta cần phải làm đó là xử lý, làm sạch dữ liệu. Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn sử dụng một trong những hàm rất phổ biến và hữu dụng trong việc xử lý dữ liệu trong R - hàm case_when().</description>
    </item>
    
    <item>
      <title>Xử lý dữ liệu chuỗi với stringr</title>
      <link>/blog/2018/09/02/2018-09-02-xu-ly-du-lieu-chuoi-voi-stringr/</link>
      <pubDate>Sun, 02 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/09/02/2018-09-02-xu-ly-du-lieu-chuoi-voi-stringr/</guid>
      <description>Trong quá trình phân tích dữ liệu, chúng ta sẽ thường gặp phải những vấn đề liên quan đến việc xử lý text. Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn sử dụng một số hàm cơ bản trong package stringr để xử lý vấn đề trên.
Stringr packageThông thường, dữ liệu text không phải lúc nào cũng “sạch” do gặp phải những vấn đề khi nhập liệu như: lúc viết hoa, lúc viết thường, thừa nhiều dấu cách, lẫn số hoặc ký tự đặc biệt trong text… Package stringr là 1 trong những package rất hữu dụng trong R để giải quyết những vấn đề trên.</description>
    </item>
    
    <item>
      <title>Xử lý dữ liệu thời gian với lubridate</title>
      <link>/blog/2018/08/27/2018-08-27-xu-ly-du-lieu-thoi-gian-voi-lubridate/</link>
      <pubDate>Mon, 27 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/08/27/2018-08-27-xu-ly-du-lieu-thoi-gian-voi-lubridate/</guid>
      <description>Trong quá trình phân tích dữ liệu, chúng ta sẽ thường gặp phải những vấn đề liên quan đến việc xử lý các biến date hoặc date-time. Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn sử dụng một số hàm cơ bản trong package lubridate để xử lý các biến date và date-time.
Lubridate packageTrong R dữ liệu liên quan đến thời gian có 2 kiểu định dạng:</description>
    </item>
    
    <item>
      <title>Xử lý factor với `forcats`</title>
      <link>/blog/2018/08/07/2018-08-07-xu-ly-factor-voi-forcats/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/08/07/2018-08-07-xu-ly-factor-voi-forcats/</guid>
      <description>Trong quá trình phân tích dữ liệu, chúng ta sẽ thường gặp phải những vấn đề liên quan đến việc xử lý các biến rời rạc (factor/categorical variable). Trong bài viết này, Ranalytics sẽ hướng dẫn các bạn sử dụng một số hàm cơ bản trong package forcats để xử lý các biến rời rạc.
Forcats packagePackage forcats là 1 package rất hữu dụng trong việc xử lý các biến rời rạc có thuộc tính là nhóm (factor) trong R.</description>
    </item>
    
  </channel>
</rss>